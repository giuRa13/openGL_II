#version 460 core

in vec3 fragmentPos;
in vec3 fragmentTexCoord;
in vec3 fragmentNormal;

out vec4 screenColor;

uniform sampler2DArray materials;
uniform samplerCube sky;
uniform vec3 cameraPos;

/*const vec3 sunDirection = normalize(vec3(-1.0, 1.0, 1.0));
void main()
{
    //screenColor = texture(material, fragmentTexCoord);

    float lightStrength = max(0.2, dot(fragmentNormal, sunDirection));
    screenColor = vec4(lightStrength * texture(materials, fragmentTexCoord).rgb, 1.0);
}*/

void main()
{
    //ambient
    vec3 light = vec3(0.2);

    //Directions
    vec3 incident = normalize(fragmentPos - cameraPos);
    vec3 reflected = normalize(reflect(incident, fragmentNormal));

    //diffuse
    light += 0.4 * texture(sky, fragmentNormal).rgb;

    //reflection
    light += 0.4 * texture(sky, reflected).rgb;

    screenColor = vec4(light,1.0) * texture(materials, fragmentTexCoord);
}